(use-package (ql:quickload '(alexandria iterate)))

(defvar *chars* "GRNHTAIUEO")
(defun parse (string &optional (limit 11) keep-all)
  (declare (optimize debug))
  (let ((table (make-array (list (length string) (length string) (+ 5 5 limit)) :initial-element nil)))
    (iter (for char in-sequence string with-index index)
      (setf (aref table 0 index (position char *chars*))
            (plist-hash-table `((,char) t) :)))

    (iter (for length from 2 to (length string))
      (iter (for start-index from 0 to (- (length string) length))
        (iter (for initial-length from 1 below length)
          (iter (for (target-nonterminal first-nonterminal second-nonterminal) in
                     '((0 . (0 2))
                       (1 . (2 4))
                       (2 . (1 3))
                       (3 . (4 0))
                       (4 . (3 3))))
            (when (and (aref table (1- initial-length) start-index first-nonterminal)
                       (aref table (1- (- length initial-length)) (+ start-index initial-length) second-nonterminal))
              (setf (aref table (1- length) start-index target-nonterminal)
                    (list (list (char *chars* target-nonterminal))))))
          (when-let (lead-char (some (lambda (x) (aref table (1- initial-length) start-index x)) (iota (+ 5 5))))
            (iter (for x from (+ 5 5) below (+ 5 5 limit))
              (when-let (rest-chars
                         (some (lambda (x) (aref table (1- (- length initial-length)) (+ start-index initial-length) x))
                               (if (= x (+ 5 5)) (iota (+ 5 5)) (list (1- x)))))
                (setf #1=(aref table (1- length) start-index x)
                      (nconc (mapcar (lambda (x) (list* (caar lead-char) x)) rest-chars)
                             (when keep-all #1#)))))))))
    (values (iter (for i from (+ 5 5) below (+ 5 5 limit))
              (collect (aref table (1- (length string)) 0 i)))
            table)))
